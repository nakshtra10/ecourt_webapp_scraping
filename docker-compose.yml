version: '3.8'

services:
  ecourts-scraper:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecourts-professional-scraper
    ports:
      - "5000:5000"
      - "8080:8080"  # Alternative port
    volumes:
      - ./downloads:/app/downloads
      - ./logs:/app/logs
      - ./data:/app/data
      - ./exports:/app/exports
      - ./config.ini:/app/config.ini
    environment:
      - FLASK_ENV=production
      - CHROME_BIN=/usr/bin/google-chrome
      - CHROMEDRIVER_PATH=/usr/local/bin/chromedriver
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ecourts-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ecourts.rule=Host(`ecourts.localhost`)"
      - "traefik.http.services.ecourts.loadbalancer.server.port=5000"

  # Optional: Redis for task queuing and caching
  redis:
    image: redis:7-alpine
    container_name: ecourts-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ecourts-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL database for storing results
  postgres:
    image: postgres:15-alpine
    container_name: ecourts-postgres
    environment:
      POSTGRES_DB: ecourts
      POSTGRES_USER: ecourts
      POSTGRES_PASSWORD: ecourts123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - ecourts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecourts"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ecourts-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ecourts-scraper
    restart: unless-stopped
    networks:
      - ecourts-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ecourts-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - ecourts-network

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ecourts-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - ecourts-network

networks:
  ecourts-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Development override
# Create docker-compose.override.yml for development settings:
#
# version: '3.8'
# services:
#   ecourts-scraper:
#     environment:
#       - FLASK_ENV=development
#       - FLASK_DEBUG=1
#     volumes:
#       - .:/app
#     command: ["python", "launcher.py"]
